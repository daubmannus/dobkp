#!/bin/bash

HELP_MSG='Usage: dobkup SOURCE_DIR TARGET_ROOT_DIR [TARGET_DIR_NAME]'


throw() {
	ERR=$1
	MSG="$2"
	[ -z MSG ] && MSG='unknown'
	[ -z ERRCODE ] && ERRCODE=254
	echo -e "error: $MSG" 1>&2
	exit $ERR
}

warn() {
	echo "WARNING: $1" 1>&2
}

log() {
    DATE_STR="$(date -d@$(date +%s) +'%Y-%m-%d %H:%M:%S (%:z)')"
    echo $DATE_STR - "$@"
}

dir_is_empty() {
	[ -z "$1" ] && set -- "."
	[ ! "$(ls -A "$1")" ]
}

init() {
	[ -z "$1" ] || [ -z "$2" ] \
		&& throw 1 "wrong syntax, source and target-root dirs required.\n$HELP_MSG"

	DIR_SRC="$(readlink -e $1)"
	DIR_TRG="$(readlink -e $2)"
	[ -d "$DIR_SRC" ] \
		|| throw 2 "wrong source dir ($DIR_SRC)."
	dir_is_empty "$DIR_SRC" \
		&& throw 3 "source dir ($DIR_SRC) is empty. Maybe not mounted?"
	[ -d "$DIR_TRG" ] \
		|| throw 4 "wrong target dir ($DIR_TRG). Create it first."
	
	DIR_MD5="$DIR_TRG"/.md5s
	[ -d "$DIR_MD5" ] || mkdir "$DIR_MD5"

	LST_SRC_TMP_FILE=/tmp/.lst.src.tmp
	LST_TRG_TMP_FILE=/tmp/.lst.trg.tmp
	
	TARGET_DIR_NAME="$3"
	[ -z "$TARGET_DIR_NAME" ] && TARGET_DIR_NAME="$(printf $DIR_SRC | tr / % )"
	
	DIR_TRASH="$DIR_TRG"/.trash/"$TARGET_DIR_NAME"
	[ -d "$DIR_TRASH" ] || mkdir "$DIR_TRASH"

	
	DIR_TRG="$DIR_TRG/$TARGET_DIR_NAME"
	[ -d "$DIR_TRG" ] \
		|| mkdir "$DIR_TRG" \
		|| throw 5 "can't create target dir ($DIR_TRG)."
		

}

#############################################
# UTILS INCLUDED AS FUNCTIONS

bkp() {
	for param in "$@"; do
		cp -p "$param" "$param".bkp$(stat -c %Y "$param")~
	done
}

stat_str() {
	[ -z "$1" ] && return
	[ -L "$1" ] && stat "$1" --format="%n/%N" && return
	[ -f "$1" ] && stat "$1" --format="%n/%s/%Y"
	[ -d "$1" ] && stat "$1" --format="%n/"
}

lst() {
	[ -z "$1" ] || cd "$1"
	
	# if not empty
	dir_is_empty && return
	
	# include hidden
	shopt -s dotglob
	
	for fn in *; do
		stat_str "$fn"
	done | sort
}

#############################################

md5() {
	[ -f "$1" ] || return
	md5sum "$1" | cut -f1 -d' '
}

add() {
	fn="${1%%/*}"
	if [ -L "$DIR_SRC/$dir_path/$fn" ]; then 
	# symlink
		slnk_target="$(readlink $DIR_SRC/$dir_path/$fn)"
		echo "add: $fn -> $slnk_target" 
		ln -s "$slnk_target" "$DIR_TRG/$dir_path/$fn"
	elif [ -f "$DIR_SRC/$dir_path/$fn" ]; then
	# plane file
		file_md5=$(md5 "$DIR_SRC/$dir_path/$fn")
		echo "add: $fn ($file_md5)"
	
		[ -f "$DIR_MD5/$file_md5" ] \
			|| cp -p "$DIR_SRC/$dir_path/$fn" "$DIR_MD5/$file_md5"
		# hardlink to md5
		ln "$DIR_MD5/$file_md5" "$DIR_TRG/$dir_path/$fn"
	fi
}

del() {
	fn="${1%%/*}"
	mkdir -p "$DIR_TRASH/$dir_path"
	mv "$DIR_TRG/$dir_path/$fn" "$DIR_TRASH/$dir_path/"
	msg="$DIR_TRG/$dir_path/$fn [$1]"
	echo "del: $msg"
	log "$msg" >"$DIR_TRASH"/deletion.log
}

process_diff() {
	while read diff_line; do
		# echo "$diff_line"
		[[ "$diff_line" =~ ^'> ' ]] && add "${diff_line#> }"
		[[ "$diff_line" =~ ^'< ' ]] && del "${diff_line#< }"
	done
}

process_dir() {
	dir_path="${dir_path_src#$DIR_SRC}"
	[ -z "$dir_path" ] && dir_path='.'
	dir_path="${dir_path#/}"
	# echo = $dir_path
	echo in $dir_path_src/
	
	# if target not yet exists, create
	[ -d "$DIR_TRG/$dir_path" ] \
		|| mkdir "$DIR_TRG/$dir_path"
		
	# create new source and target .lst's in temporary location
	lst "$DIR_SRC/$dir_path" >"$LST_SRC_TMP_FILE"
	lst "$DIR_TRG/$dir_path" >"$LST_TRG_TMP_FILE"
	
	# echo "$LST_SRC_TMP_FILE"
	# cat "$LST_SRC_TMP_FILE"
	# echo "$LST_TRG_TMP_FILE"
	# cat "$LST_TRG_TMP_FILE"
	
	diff "$LST_TRG_TMP_FILE" "$LST_SRC_TMP_FILE" \
		| process_diff
}


#################################################
# MAIN

init "$1" "$2" "$3"

while read -d '' dir_path_src; do
	# echo process "$dir_path_src"
	process_dir </dev/null
done < <(find "$DIR_SRC" -type d -print0)

#################################################
# cleanup & exit

# 2DO
# remove old files from trash

rm -f "$LST_SRC_TMP_FILE"
rm -f "$LST_TRG_TMP_FILE"

#2DO
# ?remove old orphin md5s

exit 0
