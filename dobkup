#!/bin/bash

HELP_MSG='Usage: dobkup SOURCE_DIR TARGET_ROOT_DIR [TARGET_DIR_NAME]'

#2DO:
# symlinks to dirs
# symlinks to files
# keep hardlinks

throw() {
	ERR=$1
	MSG="$2"
	[ -z MSG ] && MSG='unknown'
	[ -z ERRCODE ] && ERRCODE=254
	echo -e "error: $MSG" 1>&2
	exit $ERR
}

warn() {
	echo "WARNING: $1" 1>&2
}

dir_is_empty() {
	[ -z "$1" ] && set -- "."
	[ ! "$(ls -A "$1")" ]
}

init() {
	[ -z "$1" ] || [ -z "$2" ] \
		&& throw 1 "wrong syntax, source and target-root dirs required.\n$HELP_MSG"

	DIR_SRC="$(readlink -e $1)"
	DIR_TRG="$(readlink -e $2)"
	[ -d "$DIR_SRC" ] \
		|| throw 2 "wrong source dir ($DIR_SRC)."
	dir_is_empty "$DIR_SRC" \
		&& throw 3 "source dir ($DIR_SRC) is empty. Maybe not mounted?"
	[ -d "$DIR_TRG" ] \
		|| throw 4 "wrong target dir ($DIR_TRG). Create it first."
	
	DIR_MD5="$DIR_TRG"/.md5s
	[ -d "$DIR_MD5" ] || mkdir "$DIR_MD5"

	DIR_TRASH="$DIR_TRG"/.trash
	[ -d "$DIR_TRASH" ] || mkdir "$DIR_TRASH"

	LST_SRC_TMP_FILE=/tmp/.lst.src.tmp
	LST_TRG_TMP_FILE=/tmp/.lst.trg.tmp
	
	TARGET_DIR_NAME="$3"
	[ -z "$TARGET_DIR_NAME" ] && TARGET_DIR_NAME="$(printf $DIR_SRC | tr / % )"
	DIR_TRG="$DIR_TRG/$TARGET_DIR_NAME"
	[ -d "$DIR_TRG" ] \
		|| mkdir "$DIR_TRG" \
		|| throw 5 "can't create target dir ($DIR_TRG)."
		

}

#############################################
# UTILS INCLUDED AS FUNCTIONS

bkp() {
	for param in "$@"; do
		cp -p "$param" "$param".bkp$(stat -c %Y "$param")~
	done
}

lst() {
	[ -z "$1" ] || cd "$1"
	
	# if not empty
	dir_is_empty && return
	
	# include hidden
	shopt -s dotglob
	find * \
		-maxdepth 0 \
		-type f \
		-exec stat --format="%n/%s/%Y" {} \; | sort
	# filename/size-in-bytes/last-modified-timestamp
}

#############################################

md5() {
	[ -f "$1" ] || return
	md5sum "$1" | cut -f1 -d' '
}

add_file() {
	new_filename="${1%/*/*}"
	file_md5=$(md5 "$DIR_SRC/$dir_path/$new_filename")
	echo "getting $new_filename ($file_md5)"
	
	[ -f "$DIR_MD5/$md5" ] \
		|| cp -p "$DIR_SRC/$dir_path/$new_filename" "$DIR_MD5/$file_md5"
	
	# hardlink to md5
	ln "$DIR_MD5/$file_md5" "$DIR_TRG/$dir_path/$new_filename"
}

rm_file() {
	rm_filename="${1%/*/*}"
	file_md5=$(md5 "$DIR_TRG/$dir_path/$rm_filename")
	echo "removing $DIR_TRG/$dir_path/$rm_filename ($file_md5)" | tee "$DIR_TRASH/rm.log"
	rm -f "$DIR_TRG/$dir_path/$rm_filename"
}

process_diff() {
	while read diff_line; do
		# echo "$diff_line"
		[[ "$diff_line" =~ ^'> ' ]] && add_file "${diff_line#> }"
		[[ "$diff_line" =~ ^'< ' ]] && rm_file "${diff_line#< }"
	done
}

rm_dir() {
	[ -d "$1" ] \
		&& echo "removing dir ($DIR_TRG/$dir_path/$1)" \
		&& mkdir -p "$DIR_TRASH/$dir_path" \
		&& mv "$DIR_TRG/$dir_path/$1" "$DIR_TRASH/$dir_path/"
}

process_dir() {
	dir_path="${dir_path_src#$DIR_SRC}"
	[ -z $dir_path ] && dir_path='.'
	dir_path="${dir_path#/}"
	# echo = $dir_path
	echo processing $dir_path_src
	
	# if target not yet exists, create
	[ -d "$DIR_TRG/$dir_path" ] \
		|| mkdir "$DIR_TRG/$dir_path"
		
	# create new source and target .lst's in temporary location
	lst "$DIR_SRC/$dir_path" >"$LST_SRC_TMP_FILE"
	lst "$DIR_TRG/$dir_path" >"$LST_TRG_TMP_FILE"
	
	# echo "$LST_SRC_TMP_FILE"
	# cat "$LST_SRC_TMP_FILE"
	# echo "$LST_TRG_TMP_FILE"
	# cat "$LST_TRG_TMP_FILE"
	
	diff "$LST_TRG_TMP_FILE" "$LST_SRC_TMP_FILE" \
		| process_diff
	
	# process removed dirs
	prefix="Only in $DIR_TRG/$dir_path: "
	while read -d$'\n' rm_dir_fn; do
		rm_dir "${rm_dir_fn#$prefix}"
	done < <(diff -q "$DIR_TRG/$dir_path" "$DIR_SRC/$dir_path" | grep "^$prefix")
}


#################################################
# MAIN

init "$1" "$2" "$3"

while read -d '' dir_path_src; do
	# echo process "$dir_path_src"
	process_dir </dev/null
done < <(find "$DIR_SRC" -type d -print0)
# done < <(find "$DIR_SRC" -mindepth 1 -type d -print0)

#################################################
# cleanup & exit

rm -f "$LST_SRC_TMP_FILE"
rm -f "$LST_TRG_TMP_FILE"

#2DO
# ?remove old orphin md5s

exit 0
